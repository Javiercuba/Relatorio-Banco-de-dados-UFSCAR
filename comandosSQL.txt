CREATE TABLE usuario(
	nome_usuario varchar(100) NOT NULL,
	email varchar(100),
	data_nasc date,
	tipo varchar(100),
	cpf_usuario bigint PRIMARY KEY --ERRO QUANDO TENTO O CPF TODO
)

CREATE TABLE pesquisador(
	tipo_bolsa varchar(100),
	minibiografia varchar(100),
	cpf_pesquisador bigint PRIMARY KEY,
	FOREIGN KEY (cpf_pesquisador) REFERENCES usuario(cpf_usuario)
)

CREATE TABLE memorias(
tipo_memoria varchar(100) NOT NULL,
link_memoria varchar(100) NOT NULL,
cpf bigint,
	FOREIGN KEY (cpf) REFERENCES pesquisador(cpf_pesquisador)
ON DELETE SET NULL
)

CREATE TABLE relatorio(
link_relatorio varchar(100) NOT NULL,
data_relatorio DATE NOT NULL,	
cpf bigint ,
	FOREIGN KEY (cpf) REFERENCES pesquisador(cpf_pesquisador)
ON DELETE SET NULL
)

CREATE TABLE nucleo(
	descricao varchar(100),
	nome_nucleo varchar(100) PRIMARY KEY
)

CREATE TABLE linhas_pesquisa(
	nome_nucleo varchar(100),
	numero_linha int PRIMARY KEY,
	decricao_curta varchar(100) NOT NULL,
	descricao_longa varchar(100) NOT NULL,
	FOREIGN KEY (nome_nucleo) REFERENCES nucleo(nome_nucleo)
)

CREATE TABLE pertence(
	cpf_usuario bigint,
	numero_linha smallint,
	e_principal BOOLEAN NOT NULL,
	e_lider_pesquisa BOOLEAN NOT NULL,
	FOREIGN KEY (cpf_usuario) REFERENCES pesquisador(cpf_pesquisador),
	FOREIGN KEY (numero_linha) REFERENCES linhas_pesquisa(numero_linha)
)

-------------------------
ALTER TABLE PERTENCE ALTER COLUMN cpf_usuario BIGINT-- ALTERA COLUNA
DROP TABLE relatorio --REMOVER TABELA
TRUNCATE TABLE relatorio --LIMPA TABELA

----Insere nas tabelas-----
INSERT INTO pertence VALUES (13626640736,3,TRUE,TRUE)
INSERT INTO linhas_pesquisa VALUES ('Nucleo 2',3,'Linha numero tres','Essa eh a melhor terceira linha')
INSERT INTO nucleo VALUES('Nucleo de teste 3','Nucleo 3')
INSERT INTO relatorio VALUES('relatorios3.com','05-07-2020',180947216676)
INSERT INTO pesquisador VALUES('Extensao', 'gabriel.com',180947216676)
INSERT INTO usuario VALUES('gabriel',NULL ,'06-19-2000','Pesquisador',180947216676)
INSERT INTO memorias VALUES('Video','video..com',13626640736)

----Mostra as tabelas----
SELECT * FROM pertence
SELECT * FROM linhas_pesquisa
SELECT * FROM nucleo
SELECT * FROM usuario
SELECT * FROM pesquisador
SELECT * FROM memorias
SELECT * FROM relatorio

---- Listando as memorias e relatórios de um pesquisador ----
SELECT 
	usuario.nome_usuario,
	usuario.cpf_usuario, 
	memorias.tipo_memoria,
	memorias.link_memoria,
	relatorio.data_relatorio
FROM usuario
INNER JOIN memorias 
	ON usuario.cpf_usuario = memorias.cpf
INNER JOIN relatorio 
	ON usuario.cpf_usuario = relatorio.cpf
	Where usuario.cpf_usuario = 13626640736;


------  Total de linhas de pesquisa por pesquisador  --------

SELECT usuario.nome_usuario,usuario.cpf_usuario, count(pertence.numero_linha) as numero_linhas
FROM pertence 
INNER JOIN usuario
	ON usuario.cpf_usuario = pertence.cpf_usuario
GROUP BY usuario.cpf_usuario


-----  Total de pesquisadores por Nucleo  ----------
SELECT nucleo.nome_nucleo,	
	   count(pertence.cpf_usuario) as numero_pesquisadores
FROM nucleo
INNER JOIN linhas_pesquisa 
	ON nucleo.nome_nucleo = linhas_pesquisa.nome_nucleo
INNER JOIN pertence 
	ON pertence.numero_linha = linhas_pesquisa.numero_linha
GROUP BY nucleo.nome_nucleo

--Usuarios que não colocaram email----
SELECT usuario.nome_usuario as usuario_sem_email
FROM usuario
WHERE usuario.email IS NULL;

--Media cada tipo de memória por cada pesquisador --- NÃO FINALIZADA

SELECT usuario.nome_usuario, MAX(memorias.tipo_memoria) AS resultado_media
FROM usuario
INNER JOIN memorias
	ON memorias.cpf = usuario.cpf_usuario
GROUP BY usuario.cpf_usuario


---Verificar quem não entregou o relatório em um período de tempo--------			
	
	SELECT usuario.nome_usuario,
	  t.data_relatorio, 
	  pesquisador.cpf_pesquisador
FROM usuario
	INNER JOIN pesquisador --somente os pesquisadores possuem relatorios
		ON usuario.cpf_usuario = pesquisador.cpf_pesquisador
	LEFT JOIN (SELECT * FROM relatorio
			   WHERE relatorio.data_relatorio BETWEEN '01-01-2019' and '01-01-2020' ) as t 	
			   ON t.cpf = usuario.cpf_usuario	
    WHERE t.data_relatorio is NULL
		
		
